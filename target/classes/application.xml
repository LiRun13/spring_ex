<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd 
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-4.0.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">	
	
	
	<!-- 这个一定得有，注意了，如果其他配置也有需要这个，已经配置了，那不必了 -->
	<mvc:annotation-driven  />	    
	<!-- 开启注解扫描 -->
	<context:annotation-config />
	
	
	<context:component-scan base-package="com.runni.controller;com.runni.service"/>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
		<property name="messageConverters">  
	        <list>  
	               <ref bean="mappingJacksonHttpMessageConverter" />  
	        </list>  
	    </property>  
	</bean>  
	
	
	<bean id="mappingJacksonHttpMessageConverter"  
	    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	     <property name = "supportedMediaTypes">  
			  <list>  
			    <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="text"/>  
			     <constructor-arg index="1" value="plain"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			    <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="*"/>  
			     <constructor-arg index="1" value="*"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			    <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="text"/>  
			     <constructor-arg index="1" value="*"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			     <bean class="org.springframework.http.MediaType">  
			     <constructor-arg index="0" value="application"/>  
			     <constructor-arg index="1" value="json"/>  
			     <constructor-arg index="2" value="UTF-8"/>  
			    </bean>  
			  </list>  
		</property>  
	</bean>   
	
	
	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.runni.entity" />
		<property name="typeAliasesSuperType" value="com.runni.common.BaseEntity" />
		<property name="mapperLocations" value="classpath:/mappings/mappers/*Mapper.xml" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.runni.dao" />
		<property name="annotationClass" value="com.runni.persistence.MyBatisDao" />
	</bean>
	
	<!-- 定义事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- MyBatis end -->
	
	
	<!-- 配置数据源 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
    	<property name="location" value="classpath:jdbc.properties"/>   
   	</bean>  	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />		

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->

		<!-- 配置监控统计拦截的filters -->		
	</bean>

	<!--===============通用视图解析器 begin===============-->
	<bean id="viewResolverCommon"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/front/" />
		<property name="suffix" value=".jsp" />
<!--			可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑-->
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView
			</value>
		</property>
		<property name="order" value="1" />
	</bean>


	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="2"></property>
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp"></property>
	</bean>


	<!--===============通用视图解析器 end===============-->
	
	
	<!--  上传文件定义大小 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8">
		<property name="maxUploadSize" value="50048000" />	
	</bean>
</beans>